#include <iostream>
#include "timer.h"

/*/
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
/*/

int num_factors(const int &n) {
    int num = 0, i = 1;
    do {
        if(n%i == 0) 
            num += i*i == n ? 1:2;    
    } while(++i*i <= n);
    return num;
}

int main() {
    int i = 1;
    unsigned int digit = 1;
    const short DIVISORS = 500;
    //attempt1 
    {
        Timer t;
        while(num_factors(digit) < DIVISORS)
            digit = ++i*(i+1)/2;
    }
    std::cout<<digit<<std::endl;
    return 0;
}